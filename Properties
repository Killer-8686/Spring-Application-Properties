Spring Application properties

# Собрание названия настроек Spring Application
#
# Ссылка на Spring
# https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.core
#
# Все возможности настроек
# https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#appendix.application-properties
#
# По умолчанию настройки выкладываюся в application.properties - общие настройки.
# Можно указать так же профили в application.propeties:
#   spring.profiles.active={название профиля, например из файла ниже local}
# Можно добавлять новые профайлы, например, application-local.properties (можно в IDEA указать профайл в настройках запуска приложения).
# 
#
#
#
#
#


Классические настройки:


Порт запуска приложения
server.port=8080

# Настройка для добавления текста ошибки в Responce
server.error.include-message=always

Профилирование. Можно задавать несколько профилей
spring.profile.active=micro

Postgres:

Адрес БД
spring.datasource.url=jdbc:postgresql://localhost:5432/shop
Логин
spring.datasource.username=postgres
Пароль
spring.datasource.password=Killer86


Логирование

FATAL – критичные ошибки, сбои
ERROR – ошибка в работе приложения, например выбросился какой-либо exception
WARN – предупреждающие сообщения (нужно насторожиться)
INFO – просто информациионное сообщение, не обязательно ошибка
DEBUG – все, что класс выводит для отладки (режим debug)
TRACE – вывод всего

# Включить логгер в обычном приложени
private final Logger LOGGER = LoggerFactory.getLogger(this.getClass());

# https://howtodoinjava.com/spring-boot2/logging/logging-application-properties/

# Уровень общего логирования
logging.level.root=WARN

# Уровень логирования для конкретной библиотеки
logging.level.org.springframework.web=DEBUG

# Паттерн
logging.pattern.console=%C{1.} [%-5level] %d{HH:mm:ss} - %msg%n

# Логирование в файл
logging.file=c:/users/howtodoinjava/application-debug.log
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Выделение цветом части лога
%clr{${LOG_LEVEL_PATTERN}}{cian}


# Включить отображение SQL в логах
spring.jpa.show-sql=true

# Форматирование SQL
spring.jpa.propeties.hibernate.format_sql=true

# Уровень отображаемых логов - от [trace] и выше
logging.level.org.hibernate.type.descriptor.sql=trace






####################################

Micro Servises

####################################

EUREKA SERVER properties.application (локальный файл настроек)

server.port=8081

# id сервера eureka
spring.application.name=eserver

# т.к. это не клиент, то регистироваться ему не нужно
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false

# URL куда будет происходить регистрация микросервисов
eureka.client.service-url.defaultZone=http://localhost:8081/eureka

# отключение лишних логов
logging.level.com.netflix.eureka=OFF
logging.level.com.netflix.discovery=OFF

# формат вывода логов
logging.pattern.console=%C{1.} [%-5level] %d{HH:mm:ss} - %msg%n

-----------------------------------

EUREKA CLIENT properties.application (локальный файл настроек)


# номер порты будет присвоен автоматом
server.port=0

# id сервера eureka
spring.application.name=eclient

# URL куда будет происходить регистрация микросервисов
eureka.client.service-url.defaultZone=http://localhost:8081/eureka

# формат вывода логов
logging.pattern.console=%C{1.} [%-5level] %d{HH:mm:ss} - %msg%n

# каждый инстанс будем иметь уникальный id на сервере. Для нескольких копий одного МС. Проверка работы Load Balancer
eureka.instance.instance-id=${spring.application.name}:${random.value}

-----------------------------------

EUREKA API-GATEWAY properties.application (локальный файл настроек)

server.port=8082

# id сервера eureka
spring.application.name=api-gateway

# URL куда будет происходить регистрация микросервисов
eureka.client.service-url.defaultZone=http://localhost:8081/eureka

# формат вывода логов
logging.pattern.console=%C{1.} [%-5level] %d{HH:mm:ss} - %msg%n

# Включение маршрутизации входящих запросов
spring.cloud.gateway.discovery.locator.enabled=true
# замена символов запроса верхнего регистра на нижний - игнорирование регистра
spring.cloud.gateway.discovery.locator.lower-case-service-id=true


# Настройка ручного перенаправления запросов на нужный микросервис
spring.cloud.gateway.routes[0].id=test
# Название микросервиса
spring.cloud.gateway.routes[0].uri=lb://eclient
# RequestMapping("/main/) + @GetMapping("/test")
spring.cloud.gateway.routes[0].predicates[0]=Path=/main/test
# @GetMapping
spring.cloud.gateway.routes[0].predicates[1]=Method=GET



-----------------------------------

EUREKA GITHUB-CONFIG-SERVER properties.application (локальный файл настроек)

server.port=8888

spring.application.name=github-config-server

# Доступ к GIT репозиторию
spring.cloud.config.server.git.uri=https://github.com/Killer-8686/shop-properties.git

# Перед запуском клонировать удаленный git репозиторий в локальный git
spring.cloud.config.server.git.clone-on-start=true
# Место куда будет клонироваться
spring.cloud.config.server.git.basedir=file://c://tmp/shop_properties

# Для private репозитория требуется логин-токен
spring.cloud.config.server.git.username=**********Username**********
spring.cloud.config.server.git.password=**********token**********

# Название ветки которую нужно клонировать
spring.cloud.config.server.git.default-label=main

# формат вывода логов
logging.pattern.console=%C{1.} [%-5level] %d{HH:mm:ss} - %msg%n


-----------------------------------

                 Actuator 

#dependencies {
#    implementation 'org.springframework.boot:spring-boot-starter-actuator'
#}

# Включение actuator
management.endpoint.gateway.enabled=true
# Какие endpoint хотим включить
management.endpoints.web.exposure.include=*
